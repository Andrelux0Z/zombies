/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menus;

import Tablero.Tablero;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

/**
 *
 * @author andre
 */
public class InterfazJuego extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger
            .getLogger(InterfazJuego.class.getName());

    // Variables para el tablero de juego
    private static final int MAX_CELL_SIZE = 25;
    private int filasTablero = 25;
    private int columnasTablero = 25;
    private BoardView boardView;

    // Controladores
    private PanelDefensas panelDefensas;
    private ControladorDragDrop controladorDragDrop;

    /**
     * Creates new form InterfazJuego
     */
    public InterfazJuego() {
        initComponents();
        configurarTableroEnPanelDeJuego();
        configurarPanelDefensas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelJuego = new javax.swing.JPanel();
        PanelInformacion = new javax.swing.JPanel();
        PanelDragAndDrop = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelJuego.setBackground(new java.awt.Color(255, 204, 255));

        javax.swing.GroupLayout PanelJuegoLayout = new javax.swing.GroupLayout(PanelJuego);
        PanelJuego.setLayout(PanelJuegoLayout);
        PanelJuegoLayout.setHorizontalGroup(
                PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 768, Short.MAX_VALUE));
        PanelJuegoLayout.setVerticalGroup(
                PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 562, Short.MAX_VALUE));

        PanelInformacion.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout PanelInformacionLayout = new javax.swing.GroupLayout(PanelInformacion);
        PanelInformacion.setLayout(PanelInformacionLayout);
        PanelInformacionLayout.setHorizontalGroup(
                PanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 283, Short.MAX_VALUE));
        PanelInformacionLayout.setVerticalGroup(
                PanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));

        PanelDragAndDrop.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout PanelDragAndDropLayout = new javax.swing.GroupLayout(PanelDragAndDrop);
        PanelDragAndDrop.setLayout(PanelDragAndDropLayout);
        PanelDragAndDropLayout.setHorizontalGroup(
                PanelDragAndDropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));
        PanelDragAndDropLayout.setVerticalGroup(
                PanelDragAndDropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 134, Short.MAX_VALUE));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(PanelJuego, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PanelDragAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelInformacion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(PanelJuego, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelDragAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(PanelInformacion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new InterfazJuego().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDragAndDrop;
    private javax.swing.JPanel PanelInformacion;
    private javax.swing.JPanel PanelJuego;
    // End of variables declaration//GEN-END:variables

    /**
     * Configura el tablero de juego dentro de jPanel1.
     * Utiliza GridBagLayout para centrar el tablero sin afectar el GroupLayout
     * externo de NetBeans.
     */
    private void configurarTableroEnPanelDeJuego() {
        // Preservar el preferredSize que NetBeans impuso a jPanel1 mediante su
        // GroupLayout interno
        Dimension pref = PanelJuego.getPreferredSize();
        // Centrar el tablero dentro de jPanel1 usando GridBagLayout sin afectar el
        // GroupLayout externo
        PanelJuego.setLayout(new GridBagLayout());
        if (pref != null) {
            PanelJuego.setPreferredSize(pref);
        }

        // Recalcular y centrar al cambiar el tamaño del panel
        PanelJuego.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                ensureBoardCreated();
                updateBoardSizing();
            }
        });

        // Intentar inicializar en el siguiente tick del EDT por si ya tiene tamaño
        javax.swing.SwingUtilities.invokeLater(() -> {
            ensureBoardCreated();
            updateBoardSizing();
        });
    }

    /**
     * Crea el componente BoardView si aún no existe y tiene dimensiones válidas.
     */
    private void ensureBoardCreated() {
        if (boardView != null)
            return;
        int ancho = PanelJuego.getWidth();
        int alto = PanelJuego.getHeight();
        if (ancho <= 0 || alto <= 0)
            return;

        Tablero modelo = new Tablero(filasTablero, columnasTablero);
        // Tamaño provisional; se ajustará en updateBoardSizing()
        boardView = new BoardView(modelo, 1);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        PanelJuego.add(boardView, gbc);

        // Inicializar el controlador DnD ahora que el boardView existe
        if (controladorDragDrop == null) {
            controladorDragDrop = new ControladorDragDrop(boardView, filasTablero, columnasTablero, this);
            controladorDragDrop.configurarDropEnTablero();
        }

        PanelJuego.revalidate();
    }

    /**
     * Actualiza el tamaño de las celdas del tablero dinámicamente según el tamaño
     * del panel.
     */
    private void updateBoardSizing() {
        if (boardView == null)
            return;
        int ancho = PanelJuego.getWidth();
        int alto = PanelJuego.getHeight();
        if (ancho <= 0 || alto <= 0)
            return;

        int anchoCelda = ancho / columnasTablero;
        int altoCelda = alto / filasTablero;
        int tamCelda = Math.max(1, Math.min(MAX_CELL_SIZE, Math.min(anchoCelda, altoCelda)));

        boardView.setTamCelda(tamCelda);
        PanelJuego.revalidate();
        PanelJuego.repaint();
    }

    /* Ajusta dinámicamente las dimensiones del tablero y actualiza la vista. */
    public void setBoardDimensions(int rows, int cols) {
        if (rows <= 0 || cols <= 0)
            throw new IllegalArgumentException("Dimensiones invalidas");
        this.filasTablero = rows;
        this.columnasTablero = cols;
        if (boardView != null) {
            boardView.setModel(new Tablero(rows, cols));
        }
        if (controladorDragDrop != null) {
            controladorDragDrop.setDimensiones(rows, cols);
        }
        updateBoardSizing();
    }

    /*
     * Configura el panel de defensas con las imágenes de las defensas disponibles
     */
    private void configurarPanelDefensas() {
        // Inicializar panel de defensas
        panelDefensas = new PanelDefensas((nombre, imagen) -> {
            if (controladorDragDrop != null) {
                controladorDragDrop.setDefensaSeleccionada(nombre, imagen);
            }
        });

        // Configurar defensas en el panel inferior
        panelDefensas.configurar(PanelDragAndDrop);
    }
}
