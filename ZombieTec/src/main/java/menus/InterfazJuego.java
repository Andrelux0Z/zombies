/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menus;

import Tablero.Tablero;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author andre
 */
public class InterfazJuego extends javax.swing.JFrame implements SeleccionListener, DañoListener {

    private static final java.util.logging.Logger logger = java.util.logging.Logger
            .getLogger(InterfazJuego.class.getName());

    // Variables para el tablero de juego
    private int filasTablero = 20;
    private int columnasTablero = 20;
    private BoardView boardView;
    private GameController gameController;

    // Controladores
    private PanelDefensas panelDefensas;
    private ControladorDragDrop controladorDragDrop;
    private MenuPausa menuPausa;
    private Otros.Elemento entidadSeleccionada;

    /**
     * Creates new form InterfazJuego
     */
    public InterfazJuego() {
        initComponents();
        configurarTableroEnPanelDeJuego();
        configurarPanelDefensas();
        configurarTeclado();
        menuPausa = new MenuPausa(this);
        actualizarPanelInformacion(); // Mostrar historial general inicialmente
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelJuego = new BackgroundPanel();
        PanelInformacion = new javax.swing.JPanel();
        PanelDragAndDrop = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout PanelJuegoLayout = new javax.swing.GroupLayout(PanelJuego);
        PanelJuego.setLayout(PanelJuegoLayout);
        PanelJuegoLayout.setHorizontalGroup(
                PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 768, Short.MAX_VALUE));
        PanelJuegoLayout.setVerticalGroup(
                PanelJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 562, Short.MAX_VALUE));

        PanelInformacion.setBackground(new java.awt.Color(204, 255, 255));

        javax.swing.GroupLayout PanelInformacionLayout = new javax.swing.GroupLayout(PanelInformacion);
        PanelInformacion.setLayout(PanelInformacionLayout);
        PanelInformacionLayout.setHorizontalGroup(
                PanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 283, Short.MAX_VALUE));
        PanelInformacionLayout.setVerticalGroup(
                PanelInformacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));

        PanelDragAndDrop.setBackground(new java.awt.Color(204, 255, 204));

        javax.swing.GroupLayout PanelDragAndDropLayout = new javax.swing.GroupLayout(PanelDragAndDrop);
        PanelDragAndDrop.setLayout(PanelDragAndDropLayout);
        PanelDragAndDropLayout.setHorizontalGroup(
                PanelDragAndDropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));
        PanelDragAndDropLayout.setVerticalGroup(
                PanelDragAndDropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 134, Short.MAX_VALUE));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(PanelJuego, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PanelDragAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelInformacion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(PanelJuego, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelDragAndDrop, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(PanelInformacion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new InterfazJuego().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDragAndDrop;
    private javax.swing.JPanel PanelInformacion;
    private BackgroundPanel PanelJuego;
    // End of variables declaration//GEN-END:variables

    /**
     * Configura el tablero de juego dentro de jPanel1.
     * Utiliza GridBagLayout para centrar el tablero sin afectar el GroupLayout
     * externo de NetBeans.
     */
    private void configurarTableroEnPanelDeJuego() {
        // Preservar el preferredSize que NetBeans impuso a jPanel1 mediante su
        // GroupLayout interno
        Dimension pref = PanelJuego.getPreferredSize();
        // Centrar el tablero dentro de jPanel1 usando GridBagLayout sin afectar el
        // GroupLayout externo
        PanelJuego.setLayout(new GridBagLayout());
        if (pref != null) {
            PanelJuego.setPreferredSize(pref);
        }

        // Recalcular y centrar al cambiar el tamaño del panel
        PanelJuego.addComponentListener(new ComponentAdapter() {
            public void componentResized(ComponentEvent e) {
                ensureBoardCreated();
                updateBoardSizing();
            }
        });

        // Intentar inicializar en el siguiente tick del EDT por si ya tiene tamaño
        javax.swing.SwingUtilities.invokeLater(() -> {
            ensureBoardCreated();
            updateBoardSizing();
        });
    }

    /**
     * Crea el componente BoardView si aún no existe y tiene dimensiones válidas.
     */
    private void ensureBoardCreated() {
        if (boardView != null)
            return;
        int ancho = PanelJuego.getWidth();
        int alto = PanelJuego.getHeight();
        if (ancho <= 0 || alto <= 0)
            return;

        Tablero modelo = new Tablero(filasTablero, columnasTablero);
        // Tamaño provisional; se ajustará en updateBoardSizing()
        boardView = new BoardView(modelo, 1);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.NONE;
        PanelJuego.add(boardView, gbc);

        // Inicializar el controlador DnD ahora que el boardView existe
        if (controladorDragDrop == null) {
            controladorDragDrop = new ControladorDragDrop(boardView, filasTablero, columnasTablero, this);
            controladorDragDrop.configurarDropEnTablero();
        }

        // Inicializar y arrancar el controlador del juego
        if (gameController == null) {
            gameController = new GameController(boardView);
            boardView.setGameController(gameController);
            boardView.setSeleccionListener(this);
            gameController.addDañoListener(this);
        }
        gameController.start();

        PanelJuego.revalidate();
    }

    /**
     * Actualiza el tamaño de las celdas del tablero dinámicamente según el tamaño
     * del panel.
     */
    private void updateBoardSizing() {
        if (boardView == null)
            return;
        int ancho = PanelJuego.getWidth();
        int alto = PanelJuego.getHeight();
        if (ancho <= 0 || alto <= 0)
            return;

        int anchoCelda = ancho / columnasTablero;
        int altoCelda = alto / filasTablero;
        int tamCelda = Math.max(1, Math.min(anchoCelda, altoCelda));

        boardView.setCellSize(tamCelda);
        PanelJuego.revalidate();
        PanelJuego.repaint();
    }

    /* Ajusta dinámicamente las dimensiones del tablero y actualiza la vista. */
    public void setBoardDimensions(int rows, int cols) {
        if (rows <= 0 || cols <= 0)
            throw new IllegalArgumentException("Dimensiones invalidas");
        this.filasTablero = rows;
        this.columnasTablero = cols;
        if (boardView != null) {
            boardView.setModel(new Tablero(rows, cols));
        }
        if (controladorDragDrop != null) {
            controladorDragDrop.setDimensiones(rows, cols);
        }
        updateBoardSizing();
    }

    /*
     * Configura el panel de defensas con las imágenes de las defensas disponibles
     */
    private void configurarPanelDefensas() {
        // Inicializar panel de defensas
        panelDefensas = new PanelDefensas((nombre, imagen) -> {
            if (controladorDragDrop != null) {
                controladorDragDrop.setDefensaSeleccionada(nombre, imagen);
            }
        });

        // Configurar defensas en el panel inferior
        panelDefensas.configurar(PanelDragAndDrop);
    }

    /**
     * Configura el listener de teclado para pausar el juego con Escape.
     */
    private void configurarTeclado() {
        this.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    pausarJuego();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }

            @Override
            public void keyTyped(KeyEvent e) {
            }
        });
        this.setFocusable(true);
    }

    /**
     * Pausa el juego y muestra el menú de pausa.
     */
    public void pausarJuego() {
        if (gameController != null) {
            gameController.stop();
        }
        menuPausa.setVisible(true);
    }

    /**
     * Reanuda el juego desde el menú de pausa.
     */
    public void reanudarJuego() {
        if (gameController != null) {
            gameController.start();
        }
    }

    /**
     * Guarda el estado actual del juego.
     */
    public void guardarJuego() {
        // TODO: Implementar guardado usando SaveLoadManager
        JOptionPane.showMessageDialog(this, "Funcionalidad de guardado no implementada aún.", "Guardar",
                JOptionPane.INFORMATION_MESSAGE);
    }

    public void onEntidadSeleccionada(Otros.Elemento entidad) {
        this.entidadSeleccionada = entidad;
        actualizarPanelInformacion();
    }

    public void onDañoRegistrado() {
        actualizarPanelInformacion();
    }

    private void actualizarPanelInformacion() {
        PanelInformacion.removeAll();
        if (entidadSeleccionada != null) {
            PanelInformacion.setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
            gbc.insets = new java.awt.Insets(5, 5, 5, 5);
            gbc.anchor = java.awt.GridBagConstraints.WEST;

            // Nombre y ID
            javax.swing.JLabel lblNombre = new javax.swing.JLabel(
                    "Tipo: " + entidadSeleccionada.getClass().getSimpleName() + " ID: " + entidadSeleccionada.getId());
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.gridwidth = 2;
            PanelInformacion.add(lblNombre, gbc);

            // Vida
            javax.swing.JLabel lblVida = new javax.swing.JLabel("Vida: " + entidadSeleccionada.getVida());
            gbc.gridy = 1;
            PanelInformacion.add(lblVida, gbc);

            // Daño total hecho
            int dañoHecho = calcularDañoHecho(entidadSeleccionada);
            javax.swing.JLabel lblDañoHecho = new javax.swing.JLabel("Daño Hecho: " + dañoHecho);
            gbc.gridy = 2;
            PanelInformacion.add(lblDañoHecho, gbc);

            // Daño total recibido
            int dañoRecibido = calcularDañoRecibido(entidadSeleccionada);
            javax.swing.JLabel lblDañoRecibido = new javax.swing.JLabel("Daño Recibido: " + dañoRecibido);
            gbc.gridy = 3;
            PanelInformacion.add(lblDañoRecibido, gbc);

            // Historial relevante
            javax.swing.JTextArea txtHistorial = new javax.swing.JTextArea();
            txtHistorial.setEditable(false);
            txtHistorial.setText(obtenerHistorialRelevante(entidadSeleccionada));
            javax.swing.JScrollPane scroll = new javax.swing.JScrollPane(txtHistorial);
            gbc.gridy = 4;
            gbc.fill = java.awt.GridBagConstraints.BOTH;
            gbc.weightx = 1;
            gbc.weighty = 1;
            PanelInformacion.add(scroll, gbc);
        } else {
            // Mostrar historial general
            PanelInformacion.setLayout(new java.awt.BorderLayout());
            javax.swing.JLabel lblTitulo = new javax.swing.JLabel("Historial General de Daños");
            lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            PanelInformacion.add(lblTitulo, java.awt.BorderLayout.NORTH);

            javax.swing.JTextArea txtHistorialGeneral = new javax.swing.JTextArea();
            txtHistorialGeneral.setEditable(false);
            txtHistorialGeneral.setText(obtenerHistorialGeneral());
            javax.swing.JScrollPane scroll = new javax.swing.JScrollPane(txtHistorialGeneral);
            PanelInformacion.add(scroll, java.awt.BorderLayout.CENTER);
        }
        PanelInformacion.revalidate();
        PanelInformacion.repaint();
    }

    private int calcularDañoHecho(Otros.Elemento entidad) {
        if (entidad.getReporte() == null)
            return 0;
        return entidad.getReporte().getArrReportesEspecificos().stream()
                .mapToInt(Otros.ReportesEspecificos::getAtaqueDado)
                .sum();
    }

    private int calcularDañoRecibido(Otros.Elemento entidad) {
        if (entidad.getReporte() == null)
            return 0;
        return entidad.getReporte().getArrReportesEspecificos().stream()
                .mapToInt(Otros.ReportesEspecificos::getAtaqueRecibido)
                .sum();
    }

    private String obtenerHistorialRelevante(Otros.Elemento entidad) {
        if (gameController == null)
            return "";
        StringBuilder sb = new StringBuilder("Historial de Daños:\n");
        gameController.getHistorialDaños().stream()
                .filter(e -> e.getAtacanteId() == entidad.getId() || e.getObjetivoId() == entidad.getId())
                .forEach(e -> sb.append(e.toString()).append("\n"));
        return sb.toString();
    }

    private String obtenerHistorialGeneral() {
        if (gameController == null)
            return "No hay historial disponible.";
        StringBuilder sb = new StringBuilder();
        gameController.getHistorialDaños().forEach(e -> sb.append(e.toString()).append("\n"));
        if (sb.length() == 0) {
            sb.append("Aún no hay eventos de daño.");
        }
        return sb.toString();
    }

    private class BackgroundPanel extends javax.swing.JPanel {
        private Image backgroundImage;

        public BackgroundPanel() {
            try {
                java.io.File file = new java.io.File("src/main/java/Resourses/otros/fondohierba.jpg");
                if (file.exists()) {
                    backgroundImage = ImageIO.read(file);
                } else {
                    System.out.println("Image not found at " + file.getAbsolutePath());
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (backgroundImage != null) {
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        }
    }
}
