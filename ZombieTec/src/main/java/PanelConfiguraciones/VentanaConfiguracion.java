/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PanelConfiguraciones;

import java.awt.Color;
import utils.Sprite;
import Otros.*;
import Zombies.*;
import Defensas.*;
import java.awt.Image;
import java.io.Serializable;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import utils.Serializacion;

import java.io.File;
import java.util.Set;
import java.util.HashSet;

/**
 *
 * @author sando
 */
public class VentanaConfiguracion extends javax.swing.JFrame {
    Elemento newElemento;
    String rutaImagen;
    Image newImage;
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VentanaConfiguracion.class.getName());

    /**
     * Creates new form VentanaConfiguracion
     */
    public VentanaConfiguracion() {
        initComponents();
            
    }
    
    
private static final Set<String> DEFAULT_DEFENSES = new HashSet<>();
private static final Set<String> DEFAULT_ZOMBIES = new HashSet<>();

static {
    // Nombres por defecto para defensas (ajusta según tus clases base)
    DEFAULT_DEFENSES.add("ArbolVida");
    DEFAULT_DEFENSES.add("Bomba");
    DEFAULT_DEFENSES.add("GatoGlobo");
    DEFAULT_DEFENSES.add("Lanzallamas");
    DEFAULT_DEFENSES.add("Metralleta");
    DEFAULT_DEFENSES.add("MuroBasico");
    DEFAULT_DEFENSES.add("Torreta");

    // Nombres por defecto para zombies (ajusta según tus clases base)
    DEFAULT_ZOMBIES.add("ZombieBasico");
}

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpConfiguracion = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblDamage = new javax.swing.JLabel();
        btnBando = new javax.swing.JToggleButton();
        cbxZombies = new javax.swing.JComboBox<>();
        cbxDefensas = new javax.swing.JComboBox<>();
        lblNombreComponente = new javax.swing.JLabel();
        txfNombreComponente = new javax.swing.JTextField();
        btnCrearComponente = new javax.swing.JButton();
        lblTituloBando1 = new javax.swing.JLabel();
        lblVida = new javax.swing.JLabel();
        lblAtackSpeed = new javax.swing.JLabel();
        lblAparicion = new javax.swing.JLabel();
        lblCoste = new javax.swing.JLabel();
        lblRango = new javax.swing.JLabel();
        txfDamage = new javax.swing.JTextField();
        txfAtackSpeed = new javax.swing.JTextField();
        txfVida = new javax.swing.JTextField();
        txfCoste = new javax.swing.JTextField();
        txfSpeed = new javax.swing.JTextField();
        txfAparicion = new javax.swing.JTextField();
        lblDamageError = new javax.swing.JLabel();
        lblVidaError = new javax.swing.JLabel();
        lblAparicionError = new javax.swing.JLabel();
        lblAtackSpeedError = new javax.swing.JLabel();
        lblCosteError = new javax.swing.JLabel();
        lblRangoError = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        lblObjetivos = new javax.swing.JLabel();
        txfObjetivos = new javax.swing.JTextField();
        lblObjetivosError = new javax.swing.JLabel();
        lblSpeed = new javax.swing.JLabel();
        txfRango = new javax.swing.JTextField();
        lblSpeedError = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        btnConfiguracionExistentes = new javax.swing.JButton();
        btnSeleccionarImagen = new javax.swing.JButton();
        lblImagenInsertada = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lblComponenteCreado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setSize(new java.awt.Dimension(800, 800));

        jpConfiguracion.setBackground(new java.awt.Color(153, 255, 153));
        jpConfiguracion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblTitulo.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        lblTitulo.setText("Bienvenido a la customizacion de Defensas/Zombies para ZombiesTec");

        lblDamage.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblDamage.setText("Daño:");

        btnBando.setBackground(new java.awt.Color(255, 204, 0));
        btnBando.setText("Defensas");
        btnBando.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBandoActionPerformed(evt);
            }
        });

        cbxZombies.setBackground(new java.awt.Color(0, 153, 0));
        cbxZombies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipos de Zombies", "De contacto", "Mediano Alcance", "Zombie Aereo", "De impacto"}));
        cbxZombies.setToolTipText("Hola");
        cbxZombies.setEnabled(false);
        cbxZombies.setVisible(false);
        cbxZombies.setName("Tipos de Zombies"); // NOI18N
        cbxZombies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbxZombiesMouseEntered(evt);
            }
        });
        cbxZombies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxZombiesActionPerformed(evt);
            }
        });

        cbxDefensas.setBackground(new java.awt.Color(255, 204, 0));
        cbxDefensas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipos de defensa", "De contacto", "Mediano Alcance", "Defensa Aerea", "De impacto", "Mediano Alcance Multiple", "Muros de defensa"}));
        cbxDefensas.setToolTipText("");
        cbxDefensas.setName("Tipos de Defensa"); // NOI18N
        cbxDefensas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbxDefensasMouseEntered(evt);
            }
        });
        cbxDefensas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDefensasActionPerformed(evt);
            }
        });

        lblNombreComponente.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblNombreComponente.setText("Seleccione el nombre de su nueva componente:");

        txfNombreComponente.setBackground(new java.awt.Color(204, 255, 204));
        txfNombreComponente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfNombreComponenteKeyReleased(evt);
            }
        });

        btnCrearComponente.setBackground(new java.awt.Color(255, 51, 51));
        btnCrearComponente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCrearComponente.setText("Crear componente");
        btnCrearComponente.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 0, 51), new java.awt.Color(153, 0, 51), new java.awt.Color(153, 0, 51), new java.awt.Color(153, 0, 51)));
        btnCrearComponente.setEnabled(false);
        btnCrearComponente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearComponenteActionPerformed(evt);
            }
        });

        lblTituloBando1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblTituloBando1.setText("Seleccione el bando al que desea agregar un nuevo componente:");

        lblVida.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblVida.setText("Vida:");

        lblAtackSpeed.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblAtackSpeed.setText("AtackSpeed:");

        lblAparicion.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblAparicion.setText("Nivel de aparición:");

        lblCoste.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblCoste.setText("Coste de capacidad:");

        lblRango.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblRango.setText("Rango:");
        lblRango.setVisible(false);

        txfDamage.setBackground(new java.awt.Color(204, 255, 204));
        txfDamage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfDamageKeyReleased(evt);
            }
        });

        txfAtackSpeed.setBackground(new java.awt.Color(204, 255, 204));
        txfAtackSpeed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfAtackSpeedKeyReleased(evt);
            }
        });

        txfVida.setBackground(new java.awt.Color(204, 255, 204));
        txfVida.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfVidaKeyReleased(evt);
            }
        });

        txfCoste.setBackground(new java.awt.Color(204, 255, 204));
        txfCoste.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfCosteKeyReleased(evt);
            }
        });

        txfSpeed.setBackground(new java.awt.Color(204, 255, 204));
        txfSpeed.setEnabled(false);
        txfSpeed.setVisible(false);
        txfSpeed.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfSpeedKeyReleased(evt);
            }
        });

        txfAparicion.setBackground(new java.awt.Color(204, 255, 204));
        txfAparicion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfAparicionKeyReleased(evt);
            }
        });

        lblDamageError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblDamageError.setForeground(new java.awt.Color(153, 51, 0));
        lblDamageError.setVisible(false);
        lblDamageError.setText("No es numero o se encuentra fuera del rango valido");

        lblVidaError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblVidaError.setForeground(new java.awt.Color(153, 51, 0));
        lblVidaError.setVisible(false);
        lblVidaError.setText("No es numero o se encuentra fuera del rango valido");

        lblAparicionError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblAparicionError.setForeground(new java.awt.Color(153, 51, 0));
        lblAparicionError.setVisible(false);
        lblAparicionError.setText("No es numero o se encuentra fuera del rango valido");

        lblAtackSpeedError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblAtackSpeedError.setForeground(new java.awt.Color(153, 51, 0));
        lblAtackSpeedError.setVisible(false);
        lblAtackSpeedError.setText("No es numero o se encuentra fuera del rango valido");

        lblCosteError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblCosteError.setForeground(new java.awt.Color(153, 51, 0));
        lblCosteError.setVisible(false);
        lblCosteError.setText("No es numero o se encuentra fuera del rango valido");

        lblRangoError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblRangoError.setForeground(new java.awt.Color(153, 51, 0));
        lblRangoError.setVisible(false);
        lblRangoError.setText("No es numero o se encuentra fuera del rango valido");

        lblNameError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(153, 51, 0));
        lblNameError.setText("No es un nombre valido");

        lblObjetivos.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblObjetivos.setText("Objetivos:");
        lblObjetivos.setVisible(false);

        txfObjetivos.setBackground(new java.awt.Color(204, 255, 204));
        txfObjetivos.setEnabled(false);
        txfObjetivos.setVisible(false);
        txfObjetivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfObjetivosKeyReleased(evt);
            }
        });

        lblObjetivosError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblObjetivosError.setForeground(new java.awt.Color(153, 51, 0));
        lblObjetivosError.setVisible(false);
        lblObjetivosError.setText("No es numero o se encuentra fuera del rango valido");

        lblSpeed.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblSpeed.setText("Move Speed:");
        lblSpeed.setVisible(false);

        txfRango.setBackground(new java.awt.Color(204, 255, 204));
        txfRango.setEnabled(false);
        txfRango.setVisible(false);
        txfRango.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txfRangoKeyReleased(evt);
            }
        });

        lblSpeedError.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblSpeedError.setForeground(new java.awt.Color(153, 51, 0));
        lblSpeedError.setText("No es numero o se encuentra fuera del rango valido");
        lblSpeedError.setVisible(false);

        btnRegresar.setBackground(new java.awt.Color(255, 0, 51));
        btnRegresar.setText(">>>REGRESAR");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnConfiguracionExistentes.setBackground(new java.awt.Color(255, 0, 51));
        btnConfiguracionExistentes.setText(">>>Configuracion");
        btnConfiguracionExistentes.setEnabled(false);
        btnConfiguracionExistentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfiguracionExistentesActionPerformed(evt);
            }
        });

        btnSeleccionarImagen.setBackground(new java.awt.Color(255, 51, 51));
        btnSeleccionarImagen.setText("Seleccionar imagen");
        btnSeleccionarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImagenActionPerformed(evt);
            }
        });

        lblImagenInsertada.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 153, 51), null, new java.awt.Color(0, 102, 0)));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblComponenteCreado.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        lblComponenteCreado.setForeground(new java.awt.Color(153, 51, 0));
        lblComponenteCreado.setVisible(false);
        lblComponenteCreado.setText("Componente creado!");

        javax.swing.GroupLayout jpConfiguracionLayout = new javax.swing.GroupLayout(jpConfiguracion);
        jpConfiguracion.setLayout(jpConfiguracionLayout);
        jpConfiguracionLayout.setHorizontalGroup(
            jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnRegresar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfiguracionExistentes))
                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTituloBando1)
                                    .addComponent(btnBando)
                                    .addComponent(cbxDefensas, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxZombies, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 129, Short.MAX_VALUE))
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNombreComponente)
                                    .addComponent(txfNombreComponente, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblVida)
                                        .addGap(96, 96, 96)
                                        .addComponent(txfVida, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblAparicion, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(txfAparicion, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblCoste, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(txfCoste, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblDamage)
                                        .addGap(91, 91, 91)
                                        .addComponent(txfDamage, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblAtackSpeed)
                                        .addGap(52, 52, 52)
                                        .addComponent(txfAtackSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblSpeed)
                                        .addGap(51, 51, 51)
                                        .addComponent(txfSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblRango)
                                        .addGap(83, 83, 83)
                                        .addComponent(txfRango, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addComponent(lblObjetivos)
                                        .addGap(64, 64, 64)
                                        .addComponent(txfObjetivos, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblImagenInsertada, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnSeleccionarImagen))))
                                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNameError)
                                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                                .addGap(12, 12, 12)
                                                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblObjetivosError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblRangoError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblSpeedError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblAtackSpeedError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblDamageError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblCosteError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblAparicionError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblVidaError, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jButton1))))
                                        .addGap(37, 58, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpConfiguracionLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnCrearComponente, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblComponenteCreado))
                                        .addGap(17, 17, 17)))))))
                .addContainerGap())
        );
        jpConfiguracionLayout.setVerticalGroup(
            jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegresar)
                    .addComponent(btnConfiguracionExistentes))
                .addGap(3, 3, 3)
                .addComponent(lblTitulo)
                .addGap(6, 6, 6)
                .addComponent(lblTituloBando1)
                .addGap(6, 6, 6)
                .addComponent(btnBando)
                .addGap(10, 10, 10)
                .addComponent(cbxDefensas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(cbxZombies, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                        .addComponent(lblNombreComponente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(txfNombreComponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblVida))
                            .addComponent(txfVida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblAparicion))
                            .addComponent(txfAparicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblCoste))
                            .addComponent(txfCoste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblDamage))
                            .addComponent(txfDamage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblAtackSpeed))
                            .addComponent(txfAtackSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblSpeed))
                            .addComponent(txfSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblRango))
                            .addComponent(txfRango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpConfiguracionLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(lblObjetivos))
                            .addComponent(txfObjetivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jpConfiguracionLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(lblNameError)
                        .addGap(21, 21, 21)
                        .addComponent(lblVidaError)
                        .addGap(9, 9, 9)
                        .addComponent(lblAparicionError)
                        .addGap(9, 9, 9)
                        .addComponent(lblCosteError)
                        .addGap(9, 9, 9)
                        .addComponent(lblDamageError)
                        .addGap(8, 8, 8)
                        .addComponent(lblAtackSpeedError)
                        .addGap(9, 9, 9)
                        .addComponent(lblSpeedError)
                        .addGap(9, 9, 9)
                        .addComponent(lblRangoError)
                        .addGap(9, 9, 9)
                        .addComponent(lblObjetivosError)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpConfiguracionLayout.createSequentialGroup()
                        .addComponent(btnSeleccionarImagen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImagenInsertada, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpConfiguracionLayout.createSequentialGroup()
                        .addComponent(btnCrearComponente, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblComponenteCreado)
                        .addGap(47, 47, 47))))
        );

        cbxZombies.getAccessibleContext().setAccessibleName("");
        cbxZombies.getAccessibleContext().setAccessibleDescription("");
        cbxDefensas.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpConfiguracion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpConfiguracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBandoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBandoActionPerformed
        if(btnBando.getText().equals("Zombies")){
            btnBando.setText("Defensas");
            btnBando.setBackground(new Color(255,204,0));
            cbxDefensas.setEnabled(true);
            cbxDefensas.setVisible(true);
            cbxZombies.setEnabled(false);
            cbxZombies.setVisible(false);
            
            opcionesDefensa();
        } else{
            this.btnBando.setText("Zombies");
            this.btnBando.setBackground(new Color(0,153,0));
            cbxDefensas.setEnabled(false);
            cbxDefensas.setVisible(false);
            cbxZombies.setEnabled(true);
            cbxZombies.setVisible(true);
            
            opcionesZombie();
            btnCrearComponente.setEnabled(isCreationCompleted());
        }                
    }//GEN-LAST:event_btnBandoActionPerformed

    
    private void btnCrearComponenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearComponenteActionPerformed
        String nombre = txfNombreComponente.getText().trim();
        try {
        if(btnBando.getText().equals("Defensas")){
            
            System.out.println(Serializacion.serializacion("src/main/java/Defensas/customized/"+nombre,(Elemento)newElemento));
        }else 
            Serializacion.serializacion("src/main/java/Zombies/customized/"+nombre,newElemento);
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE,"Error al serializar el archivo " + e.getMessage(), e);
        }
        btnCrearComponente.setEnabled(isCreationCompleted());
        lblComponenteCreado.setVisible(true);
    }//GEN-LAST:event_btnCrearComponenteActionPerformed

    
    
    
    private void txfNombreComponenteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfNombreComponenteKeyReleased
        String textoLeido = txfNombreComponente.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
            
        if(esValido(textoLeido)){
            lblNameError.setVisible(false);
        } else{
            lblNameError.setVisible(true);
        }          
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfNombreComponenteKeyReleased

    private void txfDamageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfDamageKeyReleased
        String textoLeido = txfDamage.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblDamageError.setVisible(false);
        }else
            lblDamageError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfDamageKeyReleased

    private void txfVidaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfVidaKeyReleased
        String textoLeido = txfVida.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblVidaError.setVisible(false);
        }else
            lblVidaError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfVidaKeyReleased

    private void txfAtackSpeedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfAtackSpeedKeyReleased
        String textoLeido = txfAtackSpeed.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblAtackSpeedError.setVisible(false);
        }else
            lblAtackSpeedError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfAtackSpeedKeyReleased

    private void txfAparicionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfAparicionKeyReleased
        String textoLeido = txfAparicion.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblAparicionError.setVisible(false);
        }else
            lblAparicionError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfAparicionKeyReleased

    private void txfSpeedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfSpeedKeyReleased
        String textoLeido = txfSpeed.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 1){
           lblSpeedError.setVisible(false);
        }else
            lblSpeedError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfSpeedKeyReleased

    private void txfObjetivosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfObjetivosKeyReleased
        String textoLeido = txfObjetivos.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblObjetivosError.setVisible(false);
        }else
            lblObjetivosError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfObjetivosKeyReleased

    private void txfCosteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfCosteKeyReleased
        String textoLeido = txfCoste.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 0){
           lblCosteError.setVisible(false);
        }else
            lblCosteError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfCosteKeyReleased

    
    
    
    private void cbxDefensasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDefensasActionPerformed
        opcionesDefensa();
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_cbxDefensasActionPerformed

    private void cbxZombiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxZombiesActionPerformed
        opcionesZombie();
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_cbxZombiesActionPerformed

    
    
    private void txfRangoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfRangoKeyReleased
        String textoLeido = txfRango.getText();
        
        if(textoLeido != null)
            textoLeido = textoLeido.trim();
          
        if(isNumeric(textoLeido) && Integer.parseInt(textoLeido) >= 1){
           lblRangoError.setVisible(false);
        }else
            lblRangoError.setVisible(true);
        btnCrearComponente.setEnabled(isCreationCompleted());
    }//GEN-LAST:event_txfRangoKeyReleased

    private void cbxDefensasMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxDefensasMouseEntered
        if(cbxDefensas.getModel().getElementAt(0).equals("Tipos de defensa")){
            String[] opciones = new String[] {"De contacto", "Mediano Alcance", "Defensa Aerea", "De impacto", "Mediano Alcance Multiple", "Muros de defensa"};
            cbxDefensas.setModel(new javax.swing.DefaultComboBoxModel<>(opciones));
        }
    }//GEN-LAST:event_cbxDefensasMouseEntered

    private void cbxZombiesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxZombiesMouseEntered
        if(cbxZombies.getModel().getElementAt(0).equals("Tipos de Zombies")){
            String[] opciones = new String[] {"De contacto", "Mediano Alcance", "Zombie Aereo", "De impacto"};
            cbxZombies.setModel(new javax.swing.DefaultComboBoxModel<>(opciones));
        }
    }//GEN-LAST:event_cbxZombiesMouseEntered

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        menus.MenuPrincipal editor = new menus.MenuPrincipal();
        editor.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnConfiguracionExistentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfiguracionExistentesActionPerformed
        //VentanaExistentes menu = new VentanaExistentes();
        //menu.setVisible(true);
        //this.dispose();
    }//GEN-LAST:event_btnConfiguracionExistentesActionPerformed

    private void btnSeleccionarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImagenActionPerformed
        rutaImagen = "";
        JFileChooser imagen = new JFileChooser();
        FileNameExtensionFilter filtrado = new FileNameExtensionFilter("JPG & PNG","jpg","png");
        imagen.setFileFilter(filtrado);
        
        int respuesta = imagen.showOpenDialog(this);
        
        if(respuesta == JFileChooser.APPROVE_OPTION){
            rutaImagen = imagen.getSelectedFile().getPath();
            
            newImage = new ImageIcon(rutaImagen).getImage();
            
            //Mostrar imagen
            ImageIcon newIcon = new ImageIcon(newImage.getScaledInstance(lblImagenInsertada.getWidth(), lblImagenInsertada.getHeight(), Image.SCALE_SMOOTH));
            
            lblImagenInsertada.setIcon(newIcon);
            btnCrearComponente.setEnabled(isCreationCompleted()); 
        }
    }//GEN-LAST:event_btnSeleccionarImagenActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Elemento prueba = Serializacion.deserializacion("src/main/java/Defensas/customized/andres",Elemento.class);
        System.out.println(prueba.getDamage());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void opcionesDefensa(){
        switch (cbxDefensas.getSelectedItem().toString()) {
            case "Mediano Alcance":
                lblSpeed.setVisible(false);
                txfSpeed.setVisible(false);
                txfSpeed.setEnabled(false);
                
                lblRango.setVisible(true);
                txfRango.setVisible(true);
                txfRango.setEnabled(true);
                
                lblObjetivos.setVisible(false);
                txfObjetivos.setVisible(false);
                txfObjetivos.setEnabled(false);
                
                lblDamage.setVisible(true);
                txfDamage.setVisible(true);
                txfDamage.setEnabled(true);
                
                lblAtackSpeed.setVisible(true);
                txfAtackSpeed.setVisible(true);
                txfAtackSpeed.setEnabled(true);
                break;
            case "Mediano Alcance Multiple":
                lblSpeed.setVisible(false);
                txfSpeed.setVisible(false);
                txfSpeed.setEnabled(false);
                
                lblRango.setVisible(true);
                txfRango.setVisible(true);
                txfRango.setEnabled(true);
                
                lblObjetivos.setVisible(true);
                txfObjetivos.setVisible(true);
                txfObjetivos.setEnabled(true);
                
                lblDamage.setVisible(true);
                txfDamage.setVisible(true);
                txfDamage.setEnabled(true);
                
                lblAtackSpeed.setVisible(true);
                txfAtackSpeed.setVisible(true);
                txfAtackSpeed.setEnabled(true);
                break;
            case "Muros de defensa":
                lblSpeed.setVisible(false);
                txfSpeed.setVisible(false);
                txfSpeed.setEnabled(false);
                
                lblRango.setVisible(false);
                txfRango.setVisible(false);
                txfRango.setEnabled(false);
                
                lblObjetivos.setVisible(false);
                txfObjetivos.setVisible(false);
                txfObjetivos.setEnabled(false);
                
                lblDamage.setVisible(false);
                txfDamage.setVisible(false);
                txfDamage.setEnabled(false);
                
                lblAtackSpeed.setVisible(false);
                txfAtackSpeed.setVisible(false);
                txfAtackSpeed.setEnabled(false);
                break;
            case "Defensa Aerea":
                lblSpeed.setVisible(true);
                txfSpeed.setVisible(true);
                txfSpeed.setEnabled(true);                
                
                lblRango.setVisible(false);
                txfRango.setVisible(false);
                txfRango.setEnabled(false);
                
                lblObjetivos.setVisible(false);
                txfObjetivos.setVisible(false);
                txfObjetivos.setEnabled(false);
                
                lblDamage.setVisible(true);
                txfDamage.setVisible(true);
                txfDamage.setEnabled(true);
                
                lblAtackSpeed.setVisible(true);
                txfAtackSpeed.setVisible(true);
                txfAtackSpeed.setEnabled(true);
                
            default:
                lblSpeed.setVisible(false);
                txfSpeed.setVisible(false);
                txfSpeed.setEnabled(false);
                
                lblRango.setVisible(false);
                txfRango.setVisible(false);
                txfRango.setEnabled(false);
                
                lblObjetivos.setVisible(false);
                txfObjetivos.setVisible(false);
                txfObjetivos.setEnabled(false);
                
                lblDamage.setVisible(true);
                txfDamage.setVisible(true);
                txfDamage.setEnabled(true);
                
                lblAtackSpeed.setVisible(true);
                txfAtackSpeed.setVisible(true);
                txfAtackSpeed.setEnabled(true);
                break; 
        }
    }
    
    private void opcionesZombie(){
        switch (cbxZombies.getSelectedItem().toString()) {
            case "Mediano Alcance":
                lblRango.setVisible(true);
                txfRango.setVisible(true);
                txfRango.setEnabled(true);
                break;
            default:
                lblRango.setVisible(false);
                txfRango.setVisible(false);
                txfRango.setEnabled(false);
                
                lblDamage.setVisible(true);
                txfDamage.setVisible(true);
                txfDamage.setEnabled(true);
                
                lblAtackSpeed.setVisible(true);
                txfAtackSpeed.setVisible(true);
                txfAtackSpeed.setEnabled(true);
                
                lblObjetivos.setVisible(false);
                txfObjetivos.setVisible(false);
                txfObjetivos.setEnabled(false);
                
                lblSpeed.setVisible(true);
                txfSpeed.setVisible(true);
                txfSpeed.setEnabled(true);
                break;
        }
    }
   

private boolean isCreationCompleted() {
    String bando = btnBando.getText();

    // Validar campos base
    if (isEmptyOrError(txfVida, lblVidaError))                          return false;
    if (isEmptyOrError(txfAparicion, lblAparicionError))                return false;
    if (isEmptyOrError(txfNombreComponente, lblNameError))              return false;
    if (isEmptyOrError(txfCoste, lblCosteError))                        return false;
    if (newImage == null)                                               return false;                        
    
    // Validaciones por bando
    if (bando.equals("Zombies")) {
        String tipo = (String) cbxZombies.getSelectedItem();
        
        if(tipo.equals("Tipos de Zombies"))                             return false;
        
        if (isEmptyOrError(txfDamage, lblDamageError))                  return false;
        if (isEmptyOrError(txfAtackSpeed, lblAtackSpeedError))          return false;
        if (isEmptyOrError(txfSpeed, lblSpeedError))                    return false;

        if (tipo.equals("Mediano Alcance")) {
            if (isEmptyOrError(txfRango, lblRangoError))                return false;
        }

    } else if (bando.equals("Defensas")) {
        String tipo = (String) cbxDefensas.getSelectedItem();
        
        if(tipo.equals("Tipos de defensa"))                             return false;

        switch (tipo) {
            case "Mediano Alcance":
                if (isEmptyOrError(txfRango, lblRangoError))            return false;
                if (isEmptyOrError(txfDamage, lblDamageError))          return false;
                if (isEmptyOrError(txfAtackSpeed, lblAtackSpeedError))  return false;
                break;
            case "Mediano Alcance Multiple":
                if (isEmptyOrError(txfRango, lblRangoError))            return false;
                if (isEmptyOrError(txfObjetivos, lblObjetivosError))    return false;
                if (isEmptyOrError(txfDamage, lblDamageError))          return false;
                if (isEmptyOrError(txfAtackSpeed, lblAtackSpeedError))  return false;
                break;
            case "Defensa Aerea":
                if (isEmptyOrError(txfSpeed, lblSpeedError))            return false;
                if (isEmptyOrError(txfDamage, lblDamageError))          return false; 
                if (isEmptyOrError(txfAtackSpeed, lblAtackSpeedError))  return false;
                break;
            case "Muros de defensa":
                // Ya validado vida, aparicion, coste y nombre
                break;
            default: //Para De contacto y de impacto
                if (isEmptyOrError(txfDamage, lblDamageError))          return false; 
                if (isEmptyOrError(txfAtackSpeed, lblAtackSpeedError))  return false;
                break;
        }
    }

    return true;
}


//Valida si el campo está vacío o hay error visible
private boolean isEmptyOrError(javax.swing.JTextField campo, javax.swing.JLabel errorLabel) {
    return campo.getText().trim().isEmpty() || errorLabel.isVisible();
}

private void crearElemento(){
    //Atributos globales para todos
    String nombre = txfNombreComponente.getText().trim();
    int vida = Integer.parseInt(txfVida.getText().trim());
    int coste = Integer.parseInt(txfCoste.getText().trim());
    int nivelAparicion = Integer.parseInt(txfAparicion.getText().trim());
    
    //Inicializar las demas
    int damage;
    int atackSpeed;
    int rango;
    int objetivos;
    int velocidadMov;
    
    if(btnBando.getText().equals("Defensa")){
        String tipo = cbxDefensas.getSelectedItem().toString();
        switch (tipo) {
            case "De contacto":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                newElemento = new ContactoDefensaCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion);
                return;
                
            case "Mediano Alcance":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                rango = Integer.parseInt(txfRango.getText().trim());
                newElemento = new MedianoDefensaCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion,rango);
                return;
                
            
            case "Mediano Alcance Multiple":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                rango = Integer.parseInt(txfRango.getText().trim());
                objetivos = Integer.parseInt(txfObjetivos.getText().trim());
                newElemento = new MedianoMultipleDefensaCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion,rango,objetivos);
                return;
                
            case "Defensa Aerea":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                velocidadMov = Integer.parseInt(txfSpeed.getText().trim());
                newElemento = new VoladorDefensaCustomed(nombre, vida, damage, atackSpeed, coste, nivelAparicion, velocidadMov);
                return;
            
            case "De impacto":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                newElemento = new ImpactoDefensaCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion);
                return;
                
            case "Muros de defensa":
                newElemento = new MuroDefensaCustomed(nombre,vida,coste,nivelAparicion);
        }
    } else if(btnBando.getText().equals("Zombies")){
        String tipo = cbxZombies.getSelectedItem().toString();
        velocidadMov = Integer.parseInt(txfSpeed.getText().trim());
        
        switch (tipo) {
            
            case "De contacto":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                newElemento = new ContactoZombieCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion,velocidadMov);
                return;
            
            case "Mediano Alcance":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                rango = Integer.parseInt(txfRango.getText().trim());
                newElemento = new MedianoZombieCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion,velocidadMov,rango);
                return;
                
            case "Zombie Aereo":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                newElemento = new VoladorZombieCustomed(nombre, vida, damage, atackSpeed, coste, nivelAparicion, velocidadMov);
                return;
            
            case "De impacto":
                damage = Integer.parseInt(txfDamage.getText().trim());
                atackSpeed = Integer.parseInt(txfAtackSpeed.getText().trim());
                newElemento = new ChoqueZombieCustomed(nombre,vida,damage,atackSpeed,coste,nivelAparicion,velocidadMov);
        }
    }
}
    
    
private boolean esValido(String nombre) {
    if (nombre == null || nombre.trim().isEmpty()) {
        return false;
    }

    String trimmedName = nombre.trim();
    String path;
    Set<String> defaults;

    if (btnBando.getText().equals("Defensas")) {
        path = "src/main/java/Defensas/customized/" + trimmedName;
        defaults = DEFAULT_DEFENSES;
    } else {
        path = "src/main/java/Zombies/customized/" + trimmedName;
        defaults = DEFAULT_ZOMBIES;
    }

    // Verificar si existe como custom (archivo serializado)
    File customFile = new File(path);
    if (customFile.exists()) {
        return false; // Nombre ya usado en customs
    }

    // Verificar si existe en defaults
    if (defaults.contains(trimmedName)) {
        return false; // Nombre ya usado en defaults
    }
    return true;
}
    
    private boolean isNumeric(String str){
        try {
            int numero = Integer.parseInt(str);
            return true;
        } catch (Exception e) {
            return false;
        }
    }    
        
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new VentanaConfiguracion().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBando;
    private javax.swing.JButton btnConfiguracionExistentes;
    private javax.swing.JButton btnCrearComponente;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnSeleccionarImagen;
    private javax.swing.JComboBox<String> cbxDefensas;
    private javax.swing.JComboBox<String> cbxZombies;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jpConfiguracion;
    private javax.swing.JLabel lblAparicion;
    private javax.swing.JLabel lblAparicionError;
    private javax.swing.JLabel lblAtackSpeed;
    private javax.swing.JLabel lblAtackSpeedError;
    private javax.swing.JLabel lblComponenteCreado;
    private javax.swing.JLabel lblCoste;
    private javax.swing.JLabel lblCosteError;
    private javax.swing.JLabel lblDamage;
    private javax.swing.JLabel lblDamageError;
    private javax.swing.JLabel lblImagenInsertada;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblNombreComponente;
    private javax.swing.JLabel lblObjetivos;
    private javax.swing.JLabel lblObjetivosError;
    private javax.swing.JLabel lblRango;
    private javax.swing.JLabel lblRangoError;
    private javax.swing.JLabel lblSpeed;
    private javax.swing.JLabel lblSpeedError;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTituloBando1;
    private javax.swing.JLabel lblVida;
    private javax.swing.JLabel lblVidaError;
    private javax.swing.JTextField txfAparicion;
    private javax.swing.JTextField txfAtackSpeed;
    private javax.swing.JTextField txfCoste;
    private javax.swing.JTextField txfDamage;
    private javax.swing.JTextField txfNombreComponente;
    private javax.swing.JTextField txfObjetivos;
    private javax.swing.JTextField txfRango;
    private javax.swing.JTextField txfSpeed;
    private javax.swing.JTextField txfVida;
    // End of variables declaration//GEN-END:variables
}

